server {
    listen 80 default_server;
    server_name _;
    access_log  /dev/stdout;
    error_log  /dev/stdout;
    underscores_in_headers on;

    client_max_body_size 10M;

    location /private-x-accel-redirect/ {
      internal;
      alias   /private/;
    }

    location / {
        proxy_pass http://django:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        add_header Access-Control-Request-Headers *;
        add_header Access-Control-Allow-Methods *;
        add_header Access-Control-Allow-Headers *;
        proxy_read_timeout 600s;
    }

    location /static/ {
        autoindex on;
        root /;
    }

    location /media/ {
        autoindex on;
        root /;
    }

    location /admin/ {
        proxy_pass http://django:8000/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_read_timeout 600s;
   }

     # Use local DNS, relies on dnsmasq running, IPv6 needed to be disabled
  # otherwise this was giving errors (https://stackoverflow.com/questions/37669403/nginx-dnsmasq-could-not-be-resolved-5-operation-refused)
  resolver 127.0.0.11 ipv6=off;
  # Can use this instead to use Google's public DNS server instead
  #resolver 8.8.8.8;

  location ~ ^/file_download/(.*?)/(.*?)/(.*) {
    # Only allow internal redirects
    internal;

    # Location-specific logging
    error_log /var/log/nginx/internal_redirect.error.log warn;

    # Extract the remote URL parts
    set $download_protocol $1;
    set $download_host $2;
    set $download_path $3;

    # Reconstruct the remote URL
    set $download_url $download_protocol://$download_host/$download_path;

    # Setup headers
    # This removes any Content-Disposition header set from the remote server
    # and instead uses the one passed from the application server (Django)

    # Headers for the remote server, unset Authorization and Cookie for security reasons.
    proxy_set_header Host $download_host;
    proxy_set_header Authorization '';
    proxy_set_header Cookie '';

    # Headers for the response, by using $upstream_http_... here we can inject
    # other headers from Django. proxy_hide_header ensures the header from the
    # remote server isn't passed through.
    proxy_hide_header Content-Disposition;
    add_header Content-Disposition $upstream_http_content_disposition;

    # Stops the local disk from being written to (just forwards data through)
    proxy_max_temp_file_size 0;

    # Proxy the remote file through to the client
    proxy_pass $download_url$is_args$args;

    proxy_intercept_errors on;
    error_page 301 302 307 = @handle_redirect;
  }

  location @handle_redirect {
    set $saved_redirect_location '$upstream_http_location';
    proxy_pass $saved_redirect_location;
  }
}

